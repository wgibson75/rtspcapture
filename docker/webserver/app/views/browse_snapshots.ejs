<html>
  <head>
    <link href="jquery-ui-1-13-2.css" rel="stylesheet">
    <script src="jquery-3.7.1.min.js"></script>
    <script src="jquery-ui-1-13-2.min.js"></script>
    <style>
      body {
        height: 100vh;
        width: 100vw;
      }

      table {
        width: 100%;
        padding: 10px;
        border-spacing: 10px;
      }

      td {
        text-align: center;
        color: #ffff00;
      }

      select {
        appearance: none;
        font-weight: bold;
        background-color: black;
        color: #ffff00;
        cursor: pointer;
      }

      #control {
        position: absolute;
        width: 100%;
        height: 50px;
      }

      #snapshot {
        width: 100%;
        height: 100%;
      }

      #time {
        color: #99ebff;
      }

      .holder {
        width: 100%;
        height: 100%;
        position: relative;
      }

      .button {
        border-style: solid;
        border-width: thin;
        border-color: rgba(64, 64, 64, 0.5);
        border-radius: 6px 6px 6px 6px;
        padding: 4px;
        background-color: rgba(64, 64, 64, 0.5);
        text-align: center;
        color: #66ff33;
        width: 25;
      }
    </style>
  </head>
  <script>

  const SNAPSHOTS_DIR = '<%= snapshots_dir %>';
  const JSON_SUMMARY_FILE = `${SNAPSHOTS_DIR}/snapshots.json`;
  const CONTROL_OFFSET_P = '270px';
  const CONTROL_OFFSET_H = '80px';
  const CONTROL_TEXT_SIZE_P = '30pt';
  const CONTROL_TEXT_SIZE_H = '25pt';
  const SNAPSHOT_FILTER_ALL = '*';
  const NAVIGATE_PREV = 0;
  const NAVIGATE_NEXT = 1;

  let Snapshots = [];
  let Filter = SNAPSHOT_FILTER_ALL;
  let SnapshotsIndex = 0;
  let Orientation = window.orientation;
  let LastNavigation = NAVIGATE_NEXT;

  function positionControls() {
    if (Orientation == 0) { // If portrait
      $('#control').css('bottom', CONTROL_OFFSET_P);
      $('.control').css('fontSize', CONTROL_TEXT_SIZE_P);
    }
    else {
      $('#control').css('bottom', CONTROL_OFFSET_H);
      $('.control').css('fontSize', CONTROL_TEXT_SIZE_H);
    }
  }

  $(document).ready(function () {
    positionControls();

    // Make the controls draggable
    $(function() {
      $('#control').draggable();
    });

    $.getJSON(JSON_SUMMARY_FILE, function(data) {
      if (!(data instanceof Object)) return;
      if (!('snapshots' in data)) return;

      Snapshots = data.snapshots;
      insertSnapshotPane();
      showSnapshot();
      showFilters();
    });
  });

  $(window).bind("orientationchange", function() {
    Orientation = window.orientation;
    positionControls();
  });

  function getSnapshotUrl(index) {
    return 'snapshots/' + Snapshots[index];
  }

  function getSnapshotTime(index) {
    let filename = Snapshots[index];
    let filenameNoExt = filename.split('.')[0];
    let epoch = filenameNoExt.split('_')[1];
    return epoch;
  }

  function showSnapshot() {
    let banner = document.getElementById('banner');
    let time = getSnapshotTime(SnapshotsIndex);
    let date = new Date(0);
    date.setUTCMilliseconds(time);
    let d = date.toString().split(' ');
    d.splice(5, d.length - 5);
    d.splice(3, 1);
    document.getElementById('time').innerHTML = d.join(' ');

    let snapshot = document.getElementById('snapshot');
    snapshot.src = getSnapshotUrl(SnapshotsIndex);
  }

  function insertSnapshotPane() {
    var p = $('<iframe id="snapshot"></iframe>');
    p.appendTo('#main');
  }

  function nextSnapshot() {
    if (Snapshots.length == 0) return;
    LastNavigation = NAVIGATE_NEXT;

    if (Filter == SNAPSHOT_FILTER_ALL) {
      if ((SnapshotsIndex + 1) < Snapshots.length) {
        showSnapshot(++SnapshotsIndex);
      }
    }
    else {
      let index = SnapshotsIndex;
      while ((index + 1) < Snapshots.length) {
        if (Snapshots[++index].startsWith(Filter)) {
          SnapshotsIndex = index;
          showSnapshot(SnapshotsIndex);
          break;
        }
      }
    }
  }

  function prevSnapshot() {
    if (Snapshots.length == 0) return;
    LastNavigation = NAVIGATE_PREV;

    if (Filter == SNAPSHOT_FILTER_ALL) {
      if (SnapshotsIndex > 0) {
        showSnapshot(--SnapshotsIndex);
      }
    }
    else {
      let index = SnapshotsIndex;
      while (index > 0) {
        if (Snapshots[--index].startsWith(Filter)) {
          SnapshotsIndex = index;
          showSnapshot(SnapshotsIndex);
          break;
        }
      }
    }
  }

  // Get a dictionary of snapshot filters where the keys are the filter labels
  // that include a count in brackets of the number of matching snapshots and
  // the keys are the filter strings.
  function getFilters() {
    if (Snapshots.length == 0) return undefined;

    let filters = {};
    Snapshots.forEach(function (entry) {
      let pieces = entry.split('_');
      pieces.pop();
      let key = pieces.join('_');
      filters[key] = ++filters[key] || 1;
    });
    filters[SNAPSHOT_FILTER_ALL] = Object.values(filters).reduce((accumulator, value) => {
      return accumulator + value;
    }, 0);

    let rval = {};
    for (let key in filters) {
      rval[key + ' (' + filters[key] + ')'] = key;
    }
    return rval;
  }

  function showFilters() {
    let filters = getFilters(Snapshots);
    if (filters == undefined) return;

    var f = $('<select />').attr('id', 'filterSelect').attr('class', 'control').attr('onchange', 'applyFilter()');

    Object.keys(filters).toSorted().forEach(function (entry) {
      $('<option />', {value: entry, text: entry}).appendTo(f);
    });
    f.appendTo('#filter');

    positionControls(); // Position this control
  }

  function applyFilter() {
    if (Snapshots.length == 0) return;

    // Take the focus off the filter selection menu to prevent problems with
    // using the left/right cursor keys to then navigate snapshots (e.g. on iPad)
    $('#filterSelect').blur();

    Filter = $('#filterSelect').find(':selected').text().split(' (')[0];

    if ((Filter != SNAPSHOT_FILTER_ALL) && !Snapshots[SnapshotsIndex].startsWith(Filter)) {
      if (LastNavigation == NAVIGATE_NEXT) {
        nextSnapshot();
      }
      else {
        prevSnapshot();
      }
    }
  }

  function keydownHandler(e) {
    if (e.code == 'ArrowLeft') {
      prevSnapshot();
    }
    else if ((e.code == 'ArrowRight') || (e.code == 'Space')) {
      nextSnapshot();
    }
  }

  function init() {
    document.onkeydown = keydownHandler;
  }

  </script>
    <body onload="init()" bgcolor="black">
      <div class="holder">
        <div id="main">
        </div>
        <div id="control">
          <table class="control">
            <tr>
              <td width="54%" id="time">Loading please wait...</td>
              <td width="10%" class="button" onclick="document.location.replace('/')">HOME</td>
              <td width="20%" id="filter"></td>
              <td width="8%" class="button" onclick="prevSnapshot()">&lt;&lt;</td>
              <td width="8%" class="button" onclick="nextSnapshot()">&gt;&gt;</td>
            </tr>
          </table>
        </div>
     </div>
  </body>
</html>