<html>
  <head>
    <title>CCTV Playback</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="jquery-ui-1-13-2.css" rel="stylesheet">
    <script src="jquery-3.7.1.min.js"></script>
    <script src="jquery-ui-1-13-2.min.js"></script>
    <style>

    body {
      margin: 0;
      background-color: black;
    }

    div {
      color: yellow;
    }

    hr {
      border: 0;
      width: 30px;
      height: 2px;
      background-image: linear-gradient(to right, rgba(255, 255, 0, 0), rgba(255, 255, 0, 0.75), rgba(255, 255, 0, 0));
    }

    #fullscreen {
      position: relative;
      overflow: hidden;
      width: 100%;
      height: 100%;
    }

    #video {
      font-size: 0pt;
    }

    #control {
      position: absolute;
      display: flex;
      flex-direction: column;
      border-radius: 6px;
      background-color: rgba(128, 128, 128, 0.5);
    }

    #buttons {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      border-radius: 6px 6px 0px 0px;
      background-color: rgba(160, 160, 160, 0.5);
    }

    #entries {
      overflow: scroll;
      scrollbar-width: none;
      border-radius: 0px 0px 6px 6px;
    }

    #playback-state {
      text-align: center;
      font-style: italic;
      border-radius: 0px 0px 0px 0px;
      background-color: rgba(160, 160, 160, 0.5);
      color: lightblue;
    }
    
    .button-highlight {
      border-radius: 4px 4px 4px 4px;
      background-color: rgba(190, 190, 190, 0.5);
    }

    .entry-day-boundary {
      text-align: center;
      background-color: rgba(100, 100, 255, 0.5);
    }

    .entry-playback {
      display: flex;
      flex-direction: row;
      text-align: center;
    }

    .entry-playback-selected {
      background-color: rgba(32, 32, 32, 0.5);
    }

    </style>
  </head>
  <script>
  const CAPTURE_DIR = "<%= capture_dir %>";
  const CAMERA      = "<%= camera_name %>";
  const LIVE_URL    = `/${CAPTURE_DIR}/${CAMERA}/high_res/live.m3u8`;

  const RECS_DATA = [];
  RECS_DATA.push(<%- recordings %>);
  const FIELD_WIDTH = 8; // Number of fields for each recording

  const RECORDINGS = loadRecordingsGroupedByDay();

  const DAYS = ["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"];

  const MARGIN_CONTROL_TOP_PCT = 5;
  const MARGIN_CONTROL_RHT_PCT = 5;
  const HEIGHT_CONTROL_PCT     = 85;

  const MAKE_CONTROL_DRAGGABLE         = true;
  const PLAYBACK_SPEEDS                = [0, 0.5, 1, 2, 4, 8, 16];
  const PLAYBACK_SPEED_NORMAL_IDX      = 2;
  const BUTTON_PRESS_HIGHLIGHT_TIME_MS = 500;

  var currentPlayId      = null;
  var isPaused           = null;
  var currentSpeedIdx    = null;
  var buttonPressTimeout = null;
  var orientation        = null;
  var video              = null;

  $(document).ready(function () {
    video = document.getElementById("video");
    video.addEventListener("ended", e => {
      if (currentPlayId > 0) $(`#${currentPlayId - 1}`).click(); // Play next video when current ends
    });

    resizeVideo();

    initControl();
    positionControl();

    if (MAKE_CONTROL_DRAGGABLE) {
      $(function() {
        $("#control").draggable();
      });
    }

    $("#0").click(); // Play live by default i.e. entry ID 0
  });

  $(window).bind("orientationchange", function() {
    positionControl();
  });

  $(window).bind("resize", function() {
    positionControl();
    resizeVideo();
  });

  function loadRecordingsGroupedByDay() {
    let recs = [], currentDay = undefined;

    for (let i = 0; i < RECS_DATA.length; i += FIELD_WIDTH) {
      let [file, year, month, date, day, hrs, mins, secs] = RECS_DATA.slice(i, i + FIELD_WIDTH);

      if (currentDay != day) {
        recs.push([]);
        currentDay = day;
      }
      recs.at(-1).push([file, year, month, date, day, hrs, mins, secs]);
    }
    return recs;
  }

  function resizeVideo() {
    video.setAttribute("width", window.innerWidth);
  }

  function initControl() {
    if (RECORDINGS.length == 0) return;

    for (let dayIdx = 0, id = 0; dayIdx < RECORDINGS.length; dayIdx++) {
      for (let recIdx = 0; recIdx < RECORDINGS[dayIdx].length; recIdx++, id++) {
        let [file, year, month, date, day, hrs, mins, secs] = RECORDINGS[dayIdx][recIdx];

        // Format certain time fields
        date  = ("0" + date).slice(-2);
        month = ("0" + (month + 1)).slice(-2);
        hrs   = ("0" + hrs).slice(-2);
        mins  = ("0" + mins).slice(-2);
        secs  = ("0" + secs).slice(-2);

        // Show day for day boundary
        if ((dayIdx != 0) && (recIdx ==0)) {
          let text = `${DAYS[day]} ${date}-${month}-${year}`;
          $("#entries").append(`<div class="entry-day-boundary">${text}</div>`);
        }

        let text = ((dayIdx == 0) && (recIdx == 0)) ? "Live" : `${hrs}:${mins}:${secs}`;
        $("#entries").append(
          `<div class="entry-playback" id="${id}" onclick="play(${id},${dayIdx},${recIdx})">` +
          `  <div><hr></div><div style="flex-grow: 1">${text}</div><div><hr></div>` +
          "</div>"
        );
      }
    }
  }

  function positionControl() {
    $("#control").css("height", `${HEIGHT_CONTROL_PCT}%`);
    $("#control").css("top", `${MARGIN_CONTROL_TOP_PCT}%`);
    $("#control").css("left", window.innerWidth - $("#control").width() - (window.innerWidth * 0.05));
  }

  function play(id, dayIdx, recIdx) {
    // Handle selection highlight
    if ((currentPlayId != null) && (currentPlayId != id)) {
      $("#" + currentPlayId).removeClass("entry-playback-selected");
    }
    $("#" + id).addClass("entry-playback-selected");
    currentPlayId = id;

    video.src = ((dayIdx == 0) && (recIdx == 0)) ? LIVE_URL : `/${CAPTURE_DIR}/${CAMERA}/${RECORDINGS[dayIdx][recIdx][0]}`;

    currentSpeedIdx = PLAYBACK_SPEED_NORMAL_IDX;
    setCurrentSpeed();

    showPlaybackState();
  }

  function togglePlayPause(button) {
    showButtonPress(button);

    isPaused = !isPaused;

    if (isPaused) video.pause();
    else video.play();

    showPlaybackState();
  }

  function speedUp(button) {
    // This assumes the slowest speed is zero (i.e. paused) and
    // the speed can never be negative (i.e. reverse playback)

    if (!currentPlayId) return;                                                 // Ignore setting speed on live
    if ((currentSpeedIdx == (PLAYBACK_SPEEDS.length - 1)) && !isPaused) return; // Ignore if current speed is highest
    showButtonPress(button);

    if (isPaused) currentSpeedIdx = 0;
    ++currentSpeedIdx;

    // Must unpause playback for speed change to be possible
    if (video.paused) video.play();

    setCurrentSpeed();
  }

  function speedDown(button) {
    if (!currentPlayId) return;       // Ignore setting speed on live
    if (isPaused) return;             // Ignore if we are paused
    if (currentSpeedIdx == 0) return; // Ignore if current speed is lowest
    showButtonPress(button);

    --currentSpeedIdx;
    setCurrentSpeed();
  }

  function setCurrentSpeed() {
    speed = PLAYBACK_SPEEDS[currentSpeedIdx];
    isPaused = (speed == 0) ? true : false;

    video.playbackRate = speed;
    showPlaybackState();
  }

  function showPlaybackState() {
    $("#play-pause").html(isPaused ? "Play" : "Pause");

    let state = isPaused ? "Paused" : `x${PLAYBACK_SPEEDS[currentSpeedIdx]}`;
    $("#playback-state").html(state);
  }

  function showButtonPress(button) {
    if (buttonPressTimeout != null) {
      clearTimeout(buttonPressTimeout);
      hideButtonPress(pressedButton);
    }
    $(`#${button.id}`).toggleClass("button-highlight");

    pressedButton      = button;
    buttonPressTimeout = setTimeout(hideButtonPress, BUTTON_PRESS_HIGHLIGHT_TIME_MS, button);
  }
  
  function hideButtonPress(button) {
    $(`#${button.id}`).toggleClass("button-highlight");
    buttonPressTimeout = null;
    pressedButton = null;
  }

  </script>
  <body>
    <div id="fullscreen">
      <video id="video" type="video/mp4" playsinline autoplay muted controls></video>
      <div id="control">
        <div id="buttons">
          <div id="speed-down" class="button" onclick="speedDown(this)">&lt;&lt;</div>
          <div id="play-pause" class="button" onclick="togglePlayPause(this)">Pause</div>
          <div id="speed-up" class="button" onclick="speedUp(this)">&gt;&gt;</div>
        </div>
        <div id="playback-state"></div>
        <div id="entries"></div>
      </div>
    </div>
  </body>
</html>