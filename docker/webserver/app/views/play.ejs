<html>
  <head>
    <title>HD Playback</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="/css/play.css" rel="stylesheet" />
    <link href="jquery-ui-1-13-2.css" rel="stylesheet">
    <script src="jquery-3.7.1.min.js"></script>
    <script src="jquery-ui-1-13-2.min.js"></script>
    <script src="/scripts/play.js"></script>
  </head>
  <script>
  const CAPTURE_DIR   = "<%= capture_dir %>";
  const PLAYBACK_TIME = "<%= playback_time %>";
  const CAMERA        = "<%= camera_name %>";

  const CAMERA_LIST  = [];
  CAMERA_LIST.push(<%- camera_names_list %>);

  const MARGIN_CONTROL_TOP_PCT = 5;  // Top margin of control pane as percentage of screen height
  const HEIGHT_CONTROL_PCT     = 85; // Height of control pane as percentage of screen height

  // Doesn't work for iPad unfortunately i.e. iPad reported as Mac (clearly a bug!)
  const IS_IPHONE = (/iPhone/.test(navigator.userAgent)) ? true : false;

  // Percentage height to add to top margin of control and remove from
  // height of control for iPhone when orientation is portrait
  const IPHONE_HEIGHT_DELTA_CONTROL_PCT = 35;

  var RECORDINGS = null; // Set to Recordings object to manage recordings data
  var PLAYBACK   = null; // Set to Playback object to control video playback operations
  var CONTROL    = null; // Set to Control object to render control panel for controlling playback

  var KEYS_DOWN = {}; // Stores a dictionary of keypresses that are currently occuring


  $(document).ready(function () {
    // Make the control draggable on supported devices
    $(function() {
      $("#control").draggable();
    });

    RECORDINGS = new Recordings(CAMERA, CAMERA_LIST, CAPTURE_DIR);
    PLAYBACK   = new Playback("video");

    // Setup IDs for all control elements
    let controlElements = {
      controlId         : "control",
      titleId           : "title",
      entriesId         : "entries",
      playPauseButtonId : "play-pause",
      playbackStateId   : "play-state",
      iphoneButtonsId   : "iphone-buttons"
    };

    // Optional start position epoch
    let positionEpoch = PLAYBACK_TIME.length === 0 ? undefined : parseInt(PLAYBACK_TIME, 10);

    CONTROL = new Control(RECORDINGS, PLAYBACK, controlElements, positionEpoch, positionControl);

    positionControl(false, false, CONTROL.isFlipped());
    PLAYBACK.setControl(CONTROL);

    resizeVideo();
  });

  function isIphonePortrait() {
    return (IS_IPHONE && (screen.orientation.type == "portrait-primary"));
  }

  function resizeVideo() {
    video.setAttribute("width", window.innerWidth);
  }

  function positionControl(isResize, isOrientationChange, isFlipped) {
    let height = isIphonePortrait()
      ? HEIGHT_CONTROL_PCT - IPHONE_HEIGHT_DELTA_CONTROL_PCT
      : HEIGHT_CONTROL_PCT;

    let top = isIphonePortrait()
      ? MARGIN_CONTROL_TOP_PCT + IPHONE_HEIGHT_DELTA_CONTROL_PCT
      : MARGIN_CONTROL_TOP_PCT;

    $("#control").css("height", `${height}%`);
    $("#control").css("top", `${top}%`);

    if (!isResize || (IS_IPHONE && !isOrientationChange)) {
      $("#control").css("left", isFlipped
        ? (window.innerWidth * 0.05)
        : window.innerWidth - $("#control").width() - (window.innerWidth * 0.05));
    }
  }

  ////
  // Keypress handling
  ////////

  $(window).keydown(function(e) {
    KEYS_DOWN[e.which]++;

    // Multi-keypress
    if (Object.keys(KEYS_DOWN).length > 1) {
      if ((18 in KEYS_DOWN) &&      // Option
          (37 in KEYS_DOWN)) {      // Left cursor
        seekBack();
      }
      else if ((18 in KEYS_DOWN) && // Option
               (39 in KEYS_DOWN)) { // Right cursor
        seekForward();
      }
      else if ((16 in KEYS_DOWN) && // Shift
               (37 in KEYS_DOWN)) { // Left cursor
        prevCam();
      }
      else if ((16 in KEYS_DOWN) && // Shift
               (39 in KEYS_DOWN)) { // Right cursor
        nextCam();
      }
      else if ((93 in KEYS_DOWN) && // Command
               (37 in KEYS_DOWN)) { // Left cursor
        history.back();
      }
      // Clear out all keypresses except for Shift and Option keys to allow
      // Shift or Option to be held whilst pressing Left or Right repeatedly
      for (x in KEYS_DOWN) {
        if ((x != 16) && (x != 18)) delete KEYS_DOWN[x];
      }
    }
    // Otherwise single keypress
    else {
      switch(e.which) {
        case 32: // Spacebar
        case 40: // Down cursor
          $("#play-pause").click();
          break;

        case 37: // Left cursor
          $("#speed-down").click();
          break;

        case 39: // Right cursor
          $("#speed-up").click();
          break;

        default:
          isHandled = false;
      }
    }
    return false; // Never propogate the keypress up
  });

  $(window).keyup(function(e) {
    delete KEYS_DOWN[e.which];
  });

  $(window).bind("orientationchange", function() {
    positionControl(false, true, CONTROL.isFlipped());
  });

  $(window).bind("resize", function() {
    resizeVideo();
    positionControl(true, false, CONTROL.isFlipped());
  });


  ////
  // Button click handlers
  ////////
  function speedDown(button)       { CONTROL.speedDown(button);       }
  function togglePlayPause(button) { CONTROL.togglePlayPause(button); }
  function speedUp(button)         { CONTROL.speedUp(button);         }
  function prevCam(button)         { CONTROL.prevCam(button);         }
  function nextCam(button)         { CONTROL.nextCam(button);         }
  function seekBack(button)        { CONTROL.seekBack(button);        }
  function reposition(button)      { CONTROL.reposition(button);      }
  function seekForward(button)     { CONTROL.seekForward(button);     }

  </script>
  <body>
    <div id="fullscreen">
      <video id="video" type="video/mp4" playsinline autoplay muted controls></video>
      <div id="control">
        <div class="title" id="title"></div>
        <div class="button-group">
          <div id="speed-down" class="button" onclick="speedDown(this)">&lt;&lt;</div>
          <div id="play-pause" class="button" onclick="togglePlayPause(this)">Pause</div>
          <div id="speed-up" class="button" onclick="speedUp(this)">&gt;&gt;</div>
        </div>
        <div class="button-group">
          <div id="prev-cam" class="button" onclick="prevCam(this)">Prv</div>
          <div id="play-state"></div>
          <div id="next_cam" class="button" onclick="nextCam(this)">Nxt</div>
        </div>
        <div id="entries"></div>
        <div class="button-group" id="iphone-buttons">
          <div id="seek-back" class="button" onclick="seekBack(this)">|&lt;&lt;</div>
          <div id="flip-position" class="button" onclick="reposition(this)">Repo</div>
          <div id="seek-forward" class="button" onclick="seekForward(this)">&gt;&gt;|</div>
        </div>
      </div>
    </div>
  </body>
</html>