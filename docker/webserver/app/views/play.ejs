<html>
  <head>
    <title>HD Playback</title>
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <link href="jquery-ui-1-13-2.css" rel="stylesheet">
    <script src="jquery-3.7.1.min.js"></script>
    <script src="jquery-ui-1-13-2.min.js"></script>
    <style>

    body {
      margin: 0;
      background-color: black;
    }

    hr {
      width: 30px;
      height: 2px;
      border: 0;
      background-image: linear-gradient(to right, rgba(255, 255, 0, 0), rgba(255, 255, 0, 0.75), rgba(255, 255, 0, 0));
    }

    #fullscreen {
      position: relative;
      width: 100%;
      height: 100%;
    }

    #video {
      display: none; /* Only shown once video playback has started */
      font-size: 0pt;
    }

    #control {
      display: none; /* Set to "flex" once control pane is populated */
      flex-direction: column;
      position: absolute;
      border-radius: 6px;
      background-color: rgba(128, 128, 128, 0.5);
    }

    #buttons {
      display: flex;
      flex-direction: row;
      justify-content: space-between;
      background-color: rgba(160, 160, 160, 0.5);
    }

    #entries {
      overflow: scroll;
      scrollbar-width: none;
      border-radius: 0px 0px 6px 6px;
      color: yellow;
    }

    #playback-state {
      border-radius: 0px 0px 0px 0px;
      text-align: center;
      font-style: italic;
      background-color: rgba(160, 160, 160, 0.5);
      color: #8cff66;
    }

    .button {
      border-style: solid;
      border-width: thin;
      border-color: rgba(64, 64, 64, 0.5);
      border-radius: 6px 6px 6px 6px;
      padding: 4px;
      text-align: center;
      background-color: rgba(64, 64, 64, 0.5);
      color: #66ff33;
    }

    .button-highlight {
      background-color: rgba(190, 190, 190, 0.5);
    }

    .entry-day-boundary {
      text-align: center;
      background-color: rgba(100, 100, 255, 0.5);
    }

    .entry-playback {
      display: flex;
      flex-direction: row;
      text-align: center;
    }

    .entry-playback-selected {
      background-color: rgba(32, 32, 32, 0.5);
    }

    </style>
  </head>
  <script>
  const CAPTURE_DIR = "<%= capture_dir %>";
  const CAMERA      = "<%= camera_name %>";

  const RECS_DATA = [];
  RECS_DATA.push(<%- recordings %>);
  const FIELD_WIDTH = 8; // Number of fields for each recording

  const DAYS = ["Mon", "Tue", "Wed", "Thur", "Fri", "Sat", "Sun"];

  const MARGIN_CONTROL_TOP_PCT = 5;  // Top margin of control pane as percentage of screen height
  const HEIGHT_CONTROL_PCT     = 85; // Height of control pane as percentage of screen height

  // Percentage height to add to top margin of control and remove from
  // height of control for iPhone when orientation is portrait
  const IPHONE_HEIGHT_DELTA_CONTROL_PCT = 35;

  const LIVE_PLAY_ID                   = 0;    // ID of live playback stream
  const MAKE_CONTROL_DRAGGABLE         = true; // Flags whether to make control pane draggable on supported devices
  const BUTTON_PRESS_HIGHLIGHT_TIME_MS = 500;  // Duration of button highlight when pressed

  var RECORDINGS = null; // Set to Recordings object to manage recordings data
  var PLAYBACK   = null; // Set to Playback object to control playback

  var CURRENT_PLAY_ID      = null;  // ID of currently playing recording i.e. recording index
  var BUTTON_PRESS_TIMEOUT = null;  // Timeout object for button press highlight
  var IS_IPHONE            = false; // Flags if running on an iPhone device
  var IS_CONTROL_FLIPPED   = false; // Flags if control position is flipped to other side of screen

  var KEYS_DOWN = {}; // Stores a dictionary of keypresses that are currently occuring


  class Recordings {
    #recordings      = [];   // Recordings in reverse chronological order (including non playable live first)
    #dayBoundaryIdxs = [];   // List of day boundary indexes i.e. indexes of first recording in each day
    #captureDir      = null; // Video capture directory
    #camera          = null; // Camera name

    constructor(captureDir, camera, data, fieldWidth) {
      this.#captureDir = captureDir;
      this.#camera     = camera;

      this.#loadRecordings(data, fieldWidth);
    }

    getNumRecordings() {
      return this.#recordings.length;
    }

    getDayBoundaryIndexes() {
      return this.#dayBoundaryIdxs;
    }

    getInfo(idx) {
      if ((idx < 0) || (idx >= this.#recordings.length)) return;

      return this.#recordings[idx];
    }

    getPlayUrl(idx) {
      if ((idx < 0) || (idx >= this.#recordings.length)) return;

      // Return the live stream URL for first recording or playback URL otherwise
      return (idx == LIVE_PLAY_ID)
        ? `/${this.#captureDir}/${this.#camera}/high_res/live.m3u8`
        : `/${this.#captureDir}/${this.#camera}/${this.#recordings[idx][0]}`;
    }

    #loadRecordings(data, fieldWidth) {
      for (let fieldIdx = 0, recIdx = 0, currentDay = null; fieldIdx < data.length; fieldIdx += fieldWidth, recIdx++) {
        let [file, year, month, date, day, hrs, mins, secs] = data.slice(fieldIdx, fieldIdx + fieldWidth);

        if (currentDay != day) {
          if (currentDay != null) {
            this.#dayBoundaryIdxs.push(recIdx);
          }
          currentDay = day;
        }
        this.#recordings.push([file, year, month, date, day, hrs, mins, secs]);
      }
    };
  }

  class Playback {
    #SPEEDS           = [0, 0.5, 1, 2, 4, 8, 16]; // Supported playback speeds
    #NORMAL_SPEED_IDX = 2;                        // Index of normal playback speed
    #PAUSED_SPEED_IDX = 0;                        // Index of paused playback speed
    #SEEK_TIME_SECS   = 30;                       // Seek time in seconds

    #video    = null;
    #url      = null;
    #speedIdx = null;
    #isPaused = null;

    #sameSpeedForNextPlay = false;

    constructor(videoElementId) {
      this.#video = document.getElementById(videoElementId);
    }

    play(url) {
      if (!url) return false;

      this.#url = url;
      this.#isPaused = false;

      if (this.#sameSpeedForNextPlay) {
        this.#sameSpeedForNextPlay = false;
      }
      else {
        this.#speedIdx = this.#NORMAL_SPEED_IDX;;
      }

      this.#video.src = url;
      this.#video.playbackRate = this.#SPEEDS[this.#speedIdx];

      return true;
    }

    togglePlayPause() {
      if (!this.#url) return false;

      if (this.#isPaused) {
        this.#video.play();
        this.#isPaused = false;
      }
      else {
        this.#video.pause()
        this.#isPaused = true;
      }
      return true;
    }

    isPaused() {
      return this.#isPaused;
    }

    speedUp() {
      if (!this.#url) return false;                        // Ignore if not playing anything
      if ((this.#speedIdx == (this.#SPEEDS.length - 1)) && // Ignore if already at max speed
          !this.#isPaused) return false;                   // and not paused

      if (this.#isPaused) this.#speedIdx = this.#PAUSED_SPEED_IDX; // Set speed index to stopped if paused
      this.#video.playbackRate = this.#SPEEDS[++this.#speedIdx];   // Set the incremented playback rate
      if (this.#isPaused) this.togglePlayPause();                  // Toggle playback to commence if paused

      return true;
    }

    speedDown() {
      if (!this.#url) return false;          // Ignore if not playing anything
      if (this.#speedIdx == 0) return false; // Ignore if already at min speed

      this.#video.playbackRate = this.#SPEEDS[--this.#speedIdx]; // Set the decremented playback rate
      if (this.#isPaused) this.togglePlayPause();                // Toggle playback to commence if paused

      return true;
    }

    seekForward() {
      // Let player handle if we go forward too far
      this.#video.currentTime += this.#SEEK_TIME_SECS;
    }

    seekBackward() {
      // Let player handle if we go backward too far
      this.#video.currentTime -= this.#SEEK_TIME_SECS;
    }

    maintainSpeedForNextPlay() {
      this.#sameSpeedForNextPlay = true;
    }

    getStatusString() {
      return (this.#isPaused) ? "Paused" : `x${this.#SPEEDS[this.#speedIdx]}`;
    }
  }

  $(document).ready(function () {
    // Doesn't work for iPad unfortunately i.e. iPad reported as Mac (clearly a bug!)
    if (/iPhone/.test(navigator.userAgent)) {
      IS_IPHONE = true;
    }

    RECORDINGS = new Recordings(CAPTURE_DIR, CAMERA, RECS_DATA, FIELD_WIDTH);
    PLAYBACK   = new Playback("video");

    let video = document.getElementById("video");

    video.addEventListener("canplay", e => {
      $("#video").show();
    });

    video.addEventListener("ended", e => {
      if (CURRENT_PLAY_ID != 1) {
        PLAYBACK.maintainSpeedForNextPlay();
      }
      $(`#${CURRENT_PLAY_ID - 1}`).click(); // Play next video when current ends
    });

    initControl();
    resizeVideo();
    positionControl();

    if (MAKE_CONTROL_DRAGGABLE) {
      $(function() {
        $("#control").draggable();
      });
    }

    $(`#${LIVE_PLAY_ID}`).click(); // Play live by default
  });

  $(window).keydown(function(e) {
    KEYS_DOWN[e.which]++;

    // Multi-keypress
    if (Object.keys(KEYS_DOWN).length > 1) {
      console.log(Object.keys(KEYS_DOWN));
      if ((18 in KEYS_DOWN) && // Option
          (37 in KEYS_DOWN)) { // Left cursor
        seekBackward();
      }
      else if ((18 in KEYS_DOWN) && // Option
               (39 in KEYS_DOWN)) { // Right cursor
        seekForward();
      }
      // Clear out all keypresses except for the Option
      // key to allow Option to be held whilst pressing
      // Left or Right repeatedly
      for (x in KEYS_DOWN) {
        if (x != 18) delete KEYS_DOWN[x];
      }
    }
    // Otherwise single keypress
    else {
      switch(e.which) {
        case 32: // Spacebar
        case 40: // Down cursor
          $("#play-pause").click();
          break;

        case 37: // Left cursor
          $("#speed-down").click();
          break;

        case 39: // Right cursor
          $("#speed-up").click();
          break;

        default:
          isHandled = false;
      }
    }
    return false; // Never propogate the keypress up
  });

  $(window).keyup(function(e) {
    console.log('keyup!');
    delete KEYS_DOWN[e.which];
  });

  $(window).bind("orientationchange", function() {
    positionControl();
  });

  $(window).bind("resize", function() {
    resizeVideo();
    positionControl();
  });

  function isIphonePortrait() {
    return (IS_IPHONE && (screen.orientation.type == "portrait-primary"));
  }

  function resizeVideo() {
    video.setAttribute("width", window.innerWidth);
  }

  function initControl() {
    // Build lookup table for indexes of recordings on day boundary
    let dayRecIdxLookup = {};
    let dayRecIdxs = RECORDINGS.getDayBoundaryIndexes();
    for (let i = 0; i < dayRecIdxs.length; i++) {
      dayRecIdxLookup[dayRecIdxs[i]]++;
    }

    // Now populate all entries in the control pane showing
    for (let idx = 0; idx < RECORDINGS.getNumRecordings(); idx++) {
      let [file, year, month, date, day, hrs, mins, secs] = RECORDINGS.getInfo(idx);

      // Format certain time fields
      date  = ("0" + date).slice(-2);
      month = ("0" + (month + 1)).slice(-2);
      hrs   = ("0" + hrs).slice(-2);
      mins  = ("0" + mins).slice(-2);
      secs  = ("0" + secs).slice(-2);

      // Show day boundary
      if (idx in dayRecIdxLookup) {
        let text = `${DAYS[day]} ${date}-${month}-${year}`;
        $("#entries").append(`<div class="entry-day-boundary">${text}</div>`);
      }

      let text = (idx== LIVE_PLAY_ID) ? "Live" : `${hrs}:${mins}:${secs}`; // First entry is live

      // Use the recording index as the entry ID
      $("#entries").append(
        `<div class="entry-playback" id="${idx}" onclick="play(${idx})">` +
        `  <div><hr></div><div style="flex-grow: 1">${text}</div><div><hr></div>` +
        "</div>"
      );
    }

    // Only show button for flipping position on iPhone
    if (!IS_IPHONE) $("#flip-position").hide();

    // Now show the control pane
    $("#control").css("display", "flex");
  }

  function positionControl() {
    let height = isIphonePortrait()
      ? HEIGHT_CONTROL_PCT - IPHONE_HEIGHT_DELTA_CONTROL_PCT
      : HEIGHT_CONTROL_PCT;

    let top    = isIphonePortrait()
      ? MARGIN_CONTROL_TOP_PCT + IPHONE_HEIGHT_DELTA_CONTROL_PCT
      : MARGIN_CONTROL_TOP_PCT;

    $("#control").css("height", `${height}%`);
    $("#control").css("top", `${top}%`);
    $("#control").css("left", IS_CONTROL_FLIPPED
      ? (window.innerWidth * 0.05)
      : window.innerWidth - $("#control").width() - (window.innerWidth * 0.05));
  }

  // Note: recording index and corresponding entry ID in control pane are the same
  function play(idx) {
    PLAYBACK.play(RECORDINGS.getPlayUrl(idx));

    // Handle selection highlight
    if ((CURRENT_PLAY_ID != null) && (CURRENT_PLAY_ID != idx)) {
      $("#" + CURRENT_PLAY_ID).removeClass("entry-playback-selected");
    }
    $("#" + idx).addClass("entry-playback-selected");
    CURRENT_PLAY_ID = idx;

    showPlaybackState();
  }

  function togglePlayPause(button) {
    if (PLAYBACK.togglePlayPause()) {
      showButtonPress(button);
      showPlaybackState();
    }
  }

  function speedUp(button) {
    if (CURRENT_PLAY_ID == LIVE_PLAY_ID) return; // Do not support on live
    if (PLAYBACK.speedUp()) {
      showButtonPress(button);
      showPlaybackState();
    }
  }

  function speedDown(button) {
    if (CURRENT_PLAY_ID == LIVE_PLAY_ID) return; // Do not support on live
    if (PLAYBACK.speedDown()) {
      showButtonPress(button);
      showPlaybackState();
    }
  }

  function seekForward() {
    if (CURRENT_PLAY_ID == LIVE_PLAY_ID) return; // Do not support on live
    PLAYBACK.seekForward();
  }

  function seekBackward() {
    if (CURRENT_PLAY_ID == LIVE_PLAY_ID) return; // Do not support on live
    PLAYBACK.seekBackward();
  }

  function flipControlPosition(button) {
    showButtonPress(button);
    IS_CONTROL_FLIPPED = !IS_CONTROL_FLIPPED;
    positionControl();
  }

  function showPlaybackState() {
    $("#play-pause").html(PLAYBACK.isPaused() ? "Play" : "Pause");
    $("#playback-state").html(PLAYBACK.getStatusString());
  }

  function showButtonPress(button) {
    if (BUTTON_PRESS_TIMEOUT != null) {
      clearTimeout(BUTTON_PRESS_TIMEOUT);
      hideButtonPress(pressedButton);
    }
    $(`#${button.id}`).toggleClass("button-highlight");

    pressedButton = button;
    BUTTON_PRESS_TIMEOUT = setTimeout(hideButtonPress, BUTTON_PRESS_HIGHLIGHT_TIME_MS, button);
  }
  
  function hideButtonPress(button) {
    $(`#${button.id}`).toggleClass("button-highlight");
    BUTTON_PRESS_TIMEOUT = null;
    pressedButton = null;
  }

  </script>
  <body>
    <div id="fullscreen">
      <video id="video" type="video/mp4" playsinline autoplay muted controls></video>
      <div id="control">
        <div id="buttons">
          <div id="speed-down" class="button" onclick="speedDown(this)">&lt;&lt;</div>
          <div id="play-pause" class="button" onclick="togglePlayPause(this)">Pause</div>
          <div id="speed-up" class="button" onclick="speedUp(this)">&gt;&gt;</div>
        </div>
        <div id="playback-state"></div>
        <div id="entries"></div>
        <div id="flip-position" class="button" onclick="flipControlPosition(this)">Reposition</div>
      </div>
    </div>
  </body>
</html>